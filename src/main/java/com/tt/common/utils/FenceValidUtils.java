package com.tt.common.utils;

import com.eju.houseparent.common.utils.PointUtils;
import lombok.Data;
import org.apache.commons.lang3.StringUtils;

import java.awt.geom.Point2D;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class FenceValidUtils {

    @Data
    public static class PointStatusVo {
        private Integer fenceStatus;//围栏状态    1：正常，0：异常
        private Integer coordinateStatus;//坐标状态    1：正常，0：异常

    }

    /**
     * 组装坐标
     * xiaoxian20181205
     *
     * @param fence
     * @return
     */
    public static List<Point2D.Double> fenceList(String fence) {
        List<Point2D.Double> pts = new ArrayList<Point2D.Double>();
        if (StringUtils.isNotBlank(fence)) {
            String[] fenceArr = fence.split(";");
            for (int k = 0; k < fenceArr.length; k++) {
                String[] arr = fenceArr[k].split(",");
                if (arr.length == 2) {
                    pts.add(new Point2D.Double(Double.valueOf(arr[0]), Double.valueOf(arr[1])));
                } else {
                    pts = new ArrayList<>();
                    break;
                }
            }

            if (pts.size() > 0 && (pts.get(0).getX() != pts.get(pts.size() - 1).getX() || pts.get(0).getY() != pts.get(pts.size() - 1).getY())) {
                pts.add(new Point2D.Double(pts.get(0).getX(), pts.get(0).getY()));
            }
        }

        return pts;
    }

    public static PointStatusVo fenceValid(List<String> fences, BigDecimal lng, BigDecimal lat) {
        String fence = fences == null || fences.isEmpty() ? null : fences.stream().collect(Collectors.joining("|"));
        return fenceValid(fence, lng, lat);
    }

    /**
     * fence围栏可能有多个，多个用分隔
     * 围栏状态    1：正常，0：异常   [只要有一个异常,那整个结果就是异常]
     * 坐标状态    1：正常，0：异常    [只要坐标点在其中一个围栏,那整个结果就是正常]
     *
     * @param fence 围栏
     * @param lng   坐标
     * @param lat   坐标
     * @return
     */
    public static PointStatusVo fenceValid(String fence, BigDecimal lng, BigDecimal lat) {
        PointStatusVo pointStatusVo = new PointStatusVo();
        pointStatusVo.setFenceStatus(0);
        pointStatusVo.setCoordinateStatus(0);

        if (StringUtils.isNotBlank(fence)) {
            //多个围栏
            String[] fenceArr = fence.split("\\|");
            List<Integer> fenceStatusTempList = new ArrayList<>();
            List<Integer> coordinateStatusTempList = new ArrayList<>();
            //多个围栏循环
            for (int i = 0; i < fenceArr.length; i++) {
                List<Point2D.Double> fenceList = fenceList(fenceArr[i]);
                Integer fenceStatusTemp = 0;
                Integer coordinateStatusTemp = 0;
                if (fenceList.size() > 0) {
                    //围栏状态    1：正常，0：异常
                    fenceStatusTemp = PointUtils.isIntersect(fenceList) ? 0 : 1;
                    //坐标状态    1：正常，0：异常
                    if (fenceStatusTemp == 0 || lng == null || lat == null) {
                        coordinateStatusTemp = 0;
                    } else {
                        coordinateStatusTemp = PointUtils.IsPtInPoly(new Point2D.Double(lng.doubleValue(), lat.doubleValue()), fenceList) ? 1 : 0;
                    }
                } else {
                    fenceStatusTemp = 0;
                    coordinateStatusTemp = 0;
                }
                fenceStatusTempList.add(fenceStatusTemp);
                coordinateStatusTempList.add(coordinateStatusTemp);
            }
            //围栏状态:只要有一个异常,那整个结果就是异常
            if (!fenceStatusTempList.contains(0)) {
                pointStatusVo.setFenceStatus(1);
            }
            //坐标状态:只要坐标点在其中一个围栏,那整个结果就是正常
            if (coordinateStatusTempList.contains(1)) {
                pointStatusVo.setCoordinateStatus(1);
            }
        }
        return pointStatusVo;
    }

    public static void main(String[] args) {
        String fence = "121.571358755495,31.286330803535;121.571304855117,31.286091215839;121.571394550311,31.285822159879;121.571778350511,31.282239050273;121.571696323144,31.279544824783;121.571345655713,31.276763605263;121.571048846138,31.27584231213;121.57042044284,31.274376649928;121.569433463676,31.272584936607;121.568365441495,31.270924423639;121.5682045138,31.270622065725;121.568177388657,31.270413804092;121.567347234139,31.269544343153;121.568189033925,31.26891755511;121.568368390675,31.268617923135;121.568780225436,31.268305261594;121.568959661027,31.26812175238;121.569120187829,31.267999120153;121.569299623226,31.267831668757;121.569531912276,31.267648723655;121.569738184831,31.267395566089;121.56988173029,31.267280884872;121.570069068558,31.267066617112;121.570356081818,31.266784340592;121.570553357676,31.266554244426;121.570857403693,31.266387289302;121.571161222328,31.266005356331;121.571430263583,31.26577616324;121.571644533016,31.265639452808;121.571967362253,31.265380960076;121.572217441695,31.265182735391;121.572342906908,31.265014129235;121.572611667439,31.264570135908;121.572861712012,31.264372038553;121.57323707808,31.263898442398;121.573559643642,31.263485311366;121.573863310981,31.263134035098;121.574096240169,31.26282892881;121.574435723311,31.262447233984;121.574632715617,31.262109740514;121.574793964169,31.261911833277;121.575007791079,31.261482593622;121.575061261012,31.261143228524;121.575258228978,31.26080582207;121.575579779933,31.260502178393;121.576313398853,31.259802378661;121.576814092633,31.259377558045;121.577207315153,31.259105324662;121.577636342284,31.258802724396;121.57828029808,31.258318529897;121.578709381903,31.258140234449;121.578996056376,31.257990763373;121.579424972798,31.257688602492;121.579782198219,31.257416367295;121.580282797491,31.257147584156;121.580926650166,31.256787327586;121.581427058717,31.256394780481;121.582178578483,31.256268796567;121.582821627424,31.256234132104;121.583483442615,31.256090929438;121.584270544521,31.255858134015;121.584663429037,31.255588255368;121.585342763765,31.255137672258;121.585807159532,31.254744204595;121.586164151896,31.254442796508;121.586449542483,31.25420108478;121.58773631534,31.253175117184;121.588308153922,31.252784884198;121.589308520295,31.252000761531;121.590737571957,31.250978807609;121.591701902974,31.24991594282;121.592363158094,31.249319367221;121.594899636239,31.24649531328;121.598080547534,31.243124918432;121.600405411634,31.241403936791;121.601567841316,31.239940364528;121.602677114284,31.239232337767;121.602210294856,31.237758081794;121.6155980018,31.241863150031;121.617015805228,31.242100394937;121.625121080009,31.242214844106;121.625161670821,31.248482808214;121.625092680775,31.252002956641;121.62517687122,31.264214643501;121.622928525829,31.264192672757;121.619854760288,31.263517761018;121.615419075373,31.262148958054;121.615455319618,31.262434195871;121.616514500795,31.262700490497;121.617627055047,31.263089841376;121.618848934482,31.263524107308;121.619855012514,31.263771826098;121.620430140403,31.263879773578;121.621185540808,31.264126228697;121.622156153747,31.264325662513;121.62357623723,31.264367622168;121.624368097999,31.264426515856;121.625087050137,31.264515175156;121.625160170125,31.265565069313;121.625124510965,31.265966350339;121.625143331261,31.266799460099;121.625144201939,31.267725679926;121.625072905827,31.268591245159;121.625073574081,31.269331413962;121.62514626854,31.270010201794;121.625111566844,31.271584724258;121.62507612811,31.272326059291;121.625077006165,31.273437281231;121.625077568365,31.274178423362;121.625132498125,31.275366368007;121.625133670949,31.277125664637;121.625134524432,31.278545880622;121.625134934406,31.279285984421;121.62463156984,31.279782482671;121.623983891403,31.279847256701;121.623121077285,31.279788294669;121.622617739674,31.2798517409;121.621575195598,31.279884923876;121.620712879053,31.279761891075;121.619167950593,31.279854806482;121.617299732836,31.279727488944;121.616150757964,31.27984775646;121.614859171109,31.279717982134;121.61349524242,31.279834173307;121.61216871313,31.279994902749;121.611271615429,31.280095714592;121.609855968352,31.280205902902;121.608315160516,31.280406008081;121.607150559202,31.280346672554;121.605700145857,31.280220581053;121.604715461064,31.28008340757;121.604286042419,31.28018547005;121.604393104882,31.281128081382;121.60439347678,31.281993183356;121.604393856906,31.282980287689;121.604394029155,31.283474335012;121.604394189234,31.283968379025;121.604306317795,31.287731364887;121.604306443202,31.290416401502;121.604193980947,31.303804582343;121.589312841104,31.30389859454;121.589311487295,31.305811218503;121.589380577235,31.309020875437;121.589304862581,31.313522377638;121.589194403274,31.316588496138;121.588747637212,31.316548986169;121.586316534568,31.316502986236;121.582597106024,31.316435051282;121.581023172717,31.316407731145;121.579305490656,31.316441186222;121.577515686804,31.316475113123;121.576012396369,31.316453041927;121.574938238819,31.316438188753;121.573434260688,31.31641877706;121.572287790918,31.31640513166;121.570711199215,31.316388092953;121.568488423423,31.316428652228;121.568847706157,31.316370674039;121.567412814987,31.316174416076;121.565619959321,31.315978020306;121.56490186337,31.316035278559;121.564543934517,31.315385772134;121.564473037483,31.314337719627;121.564618107509,31.313042692175;121.564690858229,31.312148243422;121.564583439819,31.31165486806;121.564584496573,31.310482146205;121.564513548282,31.309372077254;121.564442717047,31.308076044336;121.564371542011,31.307150926214;121.564372351265,31.306102139099;121.564553004846,31.304930159374;121.564553457325,31.304282278521;121.564553892827,31.30363539321;121.564446358047,31.303110002551;121.56430269507,31.30283142581;121.56430277194,31.302708446038;121.564663200222,31.301291263002;121.564878439641,31.300366408025;121.565309342416,31.299443694704;121.565381474849,31.298950134644;121.565525467285,31.298518958398;121.565705419308,31.298026007699;121.565956268599,31.297472503764;121.566136165337,31.297010617285;121.566316033137,31.296579755883;121.56656679581,31.296057383979;121.566710667418,31.29568734864;121.566961374313,31.295196061149;121.56717711728,31.294703583773;121.567607540108,31.293688742683;121.567859120043,31.293320652021;121.568037820407,31.292982045565;121.567463724341,31.294119664589;121.568217533463,31.292428482195;121.568469049935,31.292090523957;121.56818156583,31.292736185576;121.568755488013,31.2915379206;121.568971050816,31.290953772415;121.569149666261,31.290492334555;121.569329260872,31.290030930872;121.569543754003,31.289538871276;121.569831046767,31.289017530283;121.570046496454,31.288648569504;121.570368653218,31.288219693141;121.570584047267,31.287728823794;121.570942045419,31.287269459107;121.571121463591,31.286654304025";

         BigDecimal lng = new BigDecimal("121.469421");
        BigDecimal lat = new BigDecimal("31.300893");

        PointStatusVo pointStatusVo = fenceValid(fence,lng,lat);
        System.out.println(pointStatusVo);
    }
}
